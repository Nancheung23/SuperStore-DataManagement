/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package SuperStore;

import java.io.IOException;
import java.net.URL;
import java.util.HashMap;

import com.google.common.collect.Table;

import javafx.application.Application;
import javafx.beans.property.ReadOnlyObjectWrapper;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.ObservableMap;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableRow;
import javafx.scene.control.TableView;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;
import java.io.File;
import java.io.InputStream;
import java.io.FileInputStream;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.VBox;
import javafx.stage.FileChooser;

public class App extends Application {
    private File lastKnownDirectory = null;

    public static void main(String[] args) throws IOException {
        // javaFx
        Application.launch(args);
    }

    @Override
    public void init() throws Exception {
        super.init();
        System.out.println("GUI Initialization...");
    }

    @Override
    public void start(Stage stage) throws Exception {
        BorderPane root = new BorderPane();
        Scene scene = new Scene(root, 600, 400);
        stage.setTitle("SuperStore Data Importer");
        stage.setScene(scene);
        addFileChooser(root, stage);
        stage.show();
    }

    @Override
    public void stop() throws Exception {
        super.stop();
        System.out.println("Program is stopped");
    }

    // GUI
    private void addFileChooser(BorderPane root, Stage primaryStage) {
        VBox vbox = new VBox(10);
        // center display
        vbox.setAlignment(Pos.CENTER);
        Label label = new Label("Choose data CSV file:");
        TextField filePathField = new TextField();
        filePathField.setEditable(false);
        Label rLabel = new Label("Choose return CSV file:");
        TextField rFilePathField = new TextField();
        rFilePathField.setEditable(false);
        InputStream dataStream = getClass().getResourceAsStream("/SuperStoreOrders.csv");
        InputStream returnStream = getClass().getResourceAsStream("/SuperStoreReturns.csv");
        if (dataStream != null && returnStream != null) {
            filePathField.setText("Resource loaded: SuperStoreOrders.csv");
            rFilePathField.setText("Resource loaded: SuperStoreReturns.csv");
        } else {
            filePathField.setText("Failed to load default resources");
            rFilePathField.setText("Failed to load default resources");
        }

        // user select
        Button fileButton = new Button("Browse data CSV...");
        Button rFileButton = new Button("Browse return CSV...");

        // Handlers for the data file button
        fileButton.setOnAction(e -> {
            FileChooser fileChooser = new FileChooser();
            configureFileChooser(fileChooser);
            if (lastKnownDirectory != null) {
                fileChooser.setInitialDirectory(lastKnownDirectory);
            }
            File selectedFile = fileChooser.showOpenDialog(primaryStage);
            if (selectedFile != null) {
                filePathField.setText(selectedFile.getAbsolutePath());
                lastKnownDirectory = selectedFile.getParentFile();
            }
        });

        // Handlers for the return file button
        rFileButton.setOnAction(e -> {
            FileChooser fileChooser = new FileChooser();
            configureFileChooser(fileChooser);
            if (lastKnownDirectory != null) {
                fileChooser.setInitialDirectory(lastKnownDirectory);
            }
            File selectedFile = fileChooser.showOpenDialog(primaryStage);
            if (selectedFile != null) {
                rFilePathField.setText(selectedFile.getAbsolutePath());
                lastKnownDirectory = selectedFile.getParentFile();
            }
        });

        // Initialize button
        Button initButton = new Button("Initialize");
        initButton.setOnAction(e -> {
            if (!filePathField.getText().isEmpty() && !rFilePathField.getText().isEmpty()) {
                try {
                    FileDataProcessor fdp = new FileDataProcessor(filePathField.getText());
                    FileDataProcessor rfdp = new FileDataProcessor(rFilePathField.getText());
                    InstanceGenerator ig = new InstanceGenerator(fdp.processFile());
                    ig.initialization();
                    ig.setReturnMap(rfdp.processFile());
                    // table
                    HashMap<String, Customer> customerMap = ig.getCustomerMap();
                    showCustomerTable(root, primaryStage, customerMap);

                } catch (IOException e1) {
                    e1.printStackTrace();
                    System.out.println("Error processing files: " + e1.getMessage());
                }
            } else {
                System.out.println("Both data and return files must be selected.");
            }
        });
        // Add components to the VBox
        vbox.getChildren().addAll(label, filePathField, fileButton, rLabel, rFilePathField, rFileButton, initButton);
        root.setCenter(vbox);
    }

    // user file chooser (default selected)
    private void configureFileChooser(FileChooser fileChooser) {
        fileChooser.setInitialDirectory(new File(System.getProperty("user.home")));
        fileChooser.getExtensionFilters().addAll(
                new FileChooser.ExtensionFilter("CSV Files", "*.csv"),
                new FileChooser.ExtensionFilter("All Files", "*.*"));
    }

    private void showCustomerTable(BorderPane root, Stage primaryStage, HashMap<String, Customer> customerMap) {
        TableView<Customer> customerTable = createCustomerTable(customerMap);
        customerTable.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY_FLEX_LAST_COLUMN);
        customerTable.setRowFactory(tv -> {
            TableRow<Customer> row = new TableRow<>();
            row.setOnMouseClicked(event -> {
                if (!row.isEmpty() && event.getClickCount() == 2) {
                    Customer clickedRow = row.getItem();
                    showCustomerOrders(clickedRow, primaryStage, customerMap);
                }
            });
            return row;
        });
        ObservableList<Customer> masterData = FXCollections.observableArrayList(customerMap.values());
        Button statsButton = new Button("General");
        statsButton.setOnAction(e -> showStatistics(customerMap));
        Button customerButton = new Button("Customer");
        customerButton.setOnAction(e -> showCustomerStatistics(customerMap));
        Button segmentButton = new Button("Segment");
        segmentButton.setOnAction(e -> showSegmentStatistics(customerMap));
        Button salesPerYearButton = new Button("Sales (Year)");
        salesPerYearButton.setOnAction(e -> showSalesPerYearStatistics(customerMap));
        Button salesPerRegionButton = new Button("Sales (Region)");
        salesPerRegionButton.setOnAction(e -> showSalesPerRegionStatistics(customerMap));

        TextField filterField = new TextField();
        filterField.setPromptText("Filter by ID or Name");

        // Filter function
        filterField.textProperty().addListener((observable, oldValue, newValue) -> {
            customerTable.setItems(masterData.filtered(customer -> {
                if (newValue == null || newValue.isEmpty()) {
                    return true;
                }
                String lowerCaseFilter = newValue.toLowerCase();
                if (customer.getCustomerName().toLowerCase().contains(lowerCaseFilter)) {
                    return true; // Filter matches customer name
                } else if (customer.getCustomerId().toLowerCase().contains(lowerCaseFilter)) {
                    return true; // Filter matches customer ID
                }
                return false; // Does not match
            }));
        });
        // Layout
        HBox filterBox = new HBox(10);
        filterBox.getChildren().addAll(new Label("Search:"), filterField);

        HBox buttonBox = new HBox(10);
        buttonBox.getChildren().addAll(statsButton, customerButton, segmentButton, salesPerYearButton,
                salesPerRegionButton);
        VBox vbox = new VBox(5);
        vbox.getChildren().addAll(buttonBox, filterBox, customerTable);
        root.setCenter(vbox);
    }

    private void showCustomerOrders(Customer customer, Stage primaryStage, HashMap<String, Customer> customerMap) {
        Stage stage = new Stage();
        ObservableList<Order> masterData = FXCollections.observableArrayList(customer.getOrders().values());
        TableView<Order> orderTable = createOrderTable(customer.getOrders());
        orderTable.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY_FLEX_LAST_COLUMN);
        orderTable.setRowFactory(tv -> {
            TableRow<Order> row = new TableRow<>();
            row.setOnMouseClicked(event -> {
                if (!row.isEmpty() && event.getClickCount() == 2) {
                    Order clickedOrder = row.getItem();
                    showOrderProducts(clickedOrder, stage, customerMap);
                }
            });
            return row;
        });
        TextField filterField = new TextField();
        filterField.setPromptText("Filter by ID");

        // Filter function
        filterField.textProperty().addListener((observable, oldValue, newValue) -> {
            orderTable.setItems(masterData.filtered(order -> {
                if (newValue == null || newValue.isEmpty()) {
                    return true;
                }
                String lowerCaseFilter = newValue.toLowerCase();
                if (order.getOrderId().toLowerCase().contains(lowerCaseFilter)) {
                    return true; // Filter matches customer name
                }
                return false; // Does not match
            }));
        });
        // Layout
        Button orderButton = new Button("Total sales for Customer");
        orderButton.setOnAction(e -> showTotalSalesPerCustomer(customerMap, customer));
        HBox filterBox = new HBox(10);
        filterBox.getChildren().addAll(new Label("Search:"), filterField, orderButton);
        VBox vbox = new VBox(5);
        vbox.getChildren().addAll(filterBox, orderTable);
        Scene scene = new Scene(vbox);
        stage.setScene(scene);
        stage.setTitle("Orders for " + customer.getCustomerName());
        stage.show();
    }

    private void showOrderProducts(Order order, Stage parentStage, HashMap<String, Customer> customerMap) {
        TableView<Product> productTable = createProductTable(order.getProducts());
        productTable.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY_FLEX_LAST_COLUMN);
        Button productButton = new Button("Total Sales for Order");
        productButton.setOnAction(e -> showTotalSalesPerOrder(customerMap, order));
        VBox vbox = new VBox(5);
        vbox.getChildren().addAll(productButton, productTable);
        Stage stage = new Stage();
        Scene scene = new Scene(vbox);
        stage.setScene(scene);
        stage.setTitle("Products for Order ID: " + order.getOrderId());
        stage.initOwner(parentStage);
        stage.show();
    }

    private TableView<Customer> createCustomerTable(HashMap<String, Customer> customerMap) {
        TableView<Customer> table = new TableView<>();
        TableColumn<Customer, String> idColumn = new TableColumn<>("Customer ID");
        idColumn.setCellValueFactory(new PropertyValueFactory<>("customerId"));
        TableColumn<Customer, String> nameColumn = new TableColumn<>("Name");
        nameColumn.setCellValueFactory(new PropertyValueFactory<>("customerName"));
        TableColumn<Customer, String> segmentColumn = new TableColumn<>("Segment");
        segmentColumn.setCellValueFactory(new PropertyValueFactory<>("segment"));
        table.getColumns().add(idColumn);
        table.getColumns().add(nameColumn);
        table.getColumns().add(segmentColumn);
        ObservableList<Customer> data = FXCollections.observableArrayList(customerMap.values());
        table.setItems(data);
        return table;
    }

    private TableView<Order> createOrderTable(ObservableMap<String, Order> observableMap) {
        TableView<Order> table = new TableView<>();
        TableColumn<Order, String> idColumn = new TableColumn<>("Order ID");
        idColumn.setCellValueFactory(new PropertyValueFactory<>("orderId"));
        TableColumn<Order, String> orderDateColumn = new TableColumn<>("Order Date");
        orderDateColumn.setCellValueFactory(new PropertyValueFactory<>("orderDate"));
        TableColumn<Order, String> shipDateColumn = new TableColumn<>("Ship Date");
        shipDateColumn.setCellValueFactory(new PropertyValueFactory<>("shipDate"));
        TableColumn<Order, Boolean> isReturnColumn = new TableColumn<>("Is Return");
        isReturnColumn.setCellValueFactory(new PropertyValueFactory<>("isReturn"));
        TableColumn<Order, Address> addressColumn = new TableColumn<>("Address");
        addressColumn.setCellValueFactory(param -> new ReadOnlyObjectWrapper<>(param.getValue().getAddress()));
        addressColumn.setCellFactory(param -> new TableCell<Order, Address>() {
            private final Button detailButton = new Button("Detail");

            @Override
            protected void updateItem(Address address, boolean empty) {
                super.updateItem(address, empty);

                if (empty || address == null) {
                    setGraphic(null);
                } else {
                    setGraphic(detailButton);
                    detailButton.setOnAction(event -> showAddressDetails(address));
                }
            }
        });
        table.getColumns().add(idColumn);
        table.getColumns().add(orderDateColumn);
        table.getColumns().add(shipDateColumn);
        table.getColumns().add(isReturnColumn);
        table.getColumns().add(addressColumn);
        ObservableList<Order> data = FXCollections.observableArrayList(observableMap.values());
        table.setItems(data);
        return table;
    }

    private void showAddressDetails(Address address) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle("Address Details");
        alert.setHeaderText(null);
        alert.setContentText("Detail:" + address);
        alert.showAndWait();
    }

    private TableView<Product> createProductTable(ObservableMap<String, Product> observableMap) {
        TableView<Product> table = new TableView<>();
        TableColumn<Product, String> idColumn = new TableColumn<>("Product ID");
        idColumn.setCellValueFactory(new PropertyValueFactory<>("productId"));
        TableColumn<Product, String> nameColumn = new TableColumn<>("Product Name");
        nameColumn.setCellValueFactory(new PropertyValueFactory<>("productName"));
        TableColumn<Product, Double> salesColumn = new TableColumn<>("Sales");
        salesColumn.setCellValueFactory(new PropertyValueFactory<>("sales"));
        TableColumn<Product, Double> profitColumn = new TableColumn<>("Profit");
        profitColumn.setCellValueFactory(new PropertyValueFactory<>("profit"));
        TableColumn<Product, Double> discountColumn = new TableColumn<>("Discount");
        discountColumn.setCellValueFactory(new PropertyValueFactory<>("discount"));
        TableColumn<Product, Double> quantityColumn = new TableColumn<>("Quantity");
        quantityColumn.setCellValueFactory(new PropertyValueFactory<>("quantity"));
        // add category
        TableColumn<Product, String> categoryColumn = new TableColumn<>("Category");
        categoryColumn.setCellValueFactory(
                cellData -> new SimpleStringProperty(cellData.getValue().getCategory().category()));
        TableColumn<Product, String> subCategoryColumn = new TableColumn<>("Sub-Category");
        subCategoryColumn.setCellValueFactory(
                cellData -> new SimpleStringProperty(cellData.getValue().getCategory().subCategory()));

        table.getColumns().add(idColumn);
        table.getColumns().add(nameColumn);
        table.getColumns().add(salesColumn);
        table.getColumns().add(profitColumn);
        table.getColumns().add(discountColumn);
        table.getColumns().add(quantityColumn);
        table.getColumns().add(categoryColumn);
        table.getColumns().add(subCategoryColumn);
        ObservableList<Product> data = FXCollections.observableArrayList(observableMap.values());
        table.setItems(data);
        return table;
    }

    public void showStatistics(HashMap<String, Customer> customerMap) {
        Stage statisticsStage = new Stage();
        statisticsStage.setTitle("Statistics");

        VBox layout = new VBox(10);
        layout.setPadding(new javafx.geometry.Insets(10));

        int totalCustomers = CustomerMapUtils.calculateCustomersNumber(customerMap);
        int totalOrders = CustomerMapUtils.calculateOrdersNumber(customerMap);
        int totalProducts = CustomerMapUtils.calculateProductsNumber(customerMap);
        Customer bestCustomer = CustomerMapUtils.getBestCustomer(customerMap);
        double totalSales = CustomerMapUtils.getTotalSales(customerMap);
        double averageSales = CustomerMapUtils.getAverageSalesForAllOrders(customerMap);

        Label customerLabel = new Label("Total Customers: " + totalCustomers);
        Label orderLabel = new Label("Total Orders: " + totalOrders);
        Label productLabel = new Label("Total Products: " + totalProducts);
        Label bestCustomerLabel = new Label("Best Customer: " + bestCustomer.getCustomerName());
        Label salesLabel = new Label(String.format("Total Sales: $%.2f", totalSales));
        Label averageSalesLabel = new Label(String.format("Average Sales (per Order): $%.2f", averageSales));

        layout.getChildren().addAll(customerLabel, orderLabel, productLabel,
                bestCustomerLabel, salesLabel, averageSalesLabel);

        Scene scene = new Scene(layout, 300, 200);
        statisticsStage.setScene(scene);
        statisticsStage.show();
    }

    public void showCustomerStatistics(HashMap<String, Customer> customerMap) {
        Stage statisticsStage = new Stage();
        statisticsStage.setTitle("Customer Statistics by State");
        VBox layout = new VBox(10);
        layout.setPadding(new javafx.geometry.Insets(10));
        TableView<propertyCustomerStat> tableView = new TableView<>();
        TableColumn<propertyCustomerStat, String> stateColumn = new TableColumn<>("State");
        TableColumn<propertyCustomerStat, Number> numberColumn = new TableColumn<>("Number of Customers");
        stateColumn.setCellValueFactory(cellData -> cellData.getValue().propertyProperty());
        numberColumn.setCellValueFactory(cellData -> cellData.getValue().numberProperty());
        tableView.getColumns().add(stateColumn);
        tableView.getColumns().add(numberColumn);
        HashMap<String, Integer> customersPerState = CustomerMapUtils.getAmountCustomerPerFilter(customerMap, "State");
        ObservableList<propertyCustomerStat> tableData = FXCollections.observableArrayList();
        customersPerState.forEach((state, number) -> {
            tableData.add(new propertyCustomerStat(state, number));
        });
        tableView.setItems(tableData);
        layout.getChildren().add(tableView);
        Scene scene = new Scene(layout, 300, 450);
        statisticsStage.setScene(scene);
        statisticsStage.show();
    }

    public void showSegmentStatistics(HashMap<String, Customer> customerMap) {
        Stage statisticsStage = new Stage();
        statisticsStage.setTitle("Customer Statistics by Segment");
        VBox layout = new VBox(10);
        layout.setPadding(new javafx.geometry.Insets(10));
        TableView<propertyCustomerStat> tableView = new TableView<>();
        TableColumn<propertyCustomerStat, String> segmentColumn = new TableColumn<>("Segment");
        TableColumn<propertyCustomerStat, Number> numberColumn = new TableColumn<>("Number of Customers");
        segmentColumn.setCellValueFactory(cellData -> cellData.getValue().propertyProperty());
        numberColumn.setCellValueFactory(cellData -> cellData.getValue().numberProperty());
        tableView.getColumns().add(segmentColumn);
        tableView.getColumns().add(numberColumn);
        HashMap<String, Integer> customersPerSegment = CustomerMapUtils.getAmountOfSegment(customerMap);
        ObservableList<propertyCustomerStat> tableData = FXCollections.observableArrayList();
        customersPerSegment.forEach((segment, number) -> {
            tableData.add(new propertyCustomerStat(segment, number));
        });
        tableView.setItems(tableData);
        layout.getChildren().add(tableView);
        Scene scene = new Scene(layout, 300, 450);
        statisticsStage.setScene(scene);
        statisticsStage.show();
    }

    public void showSalesPerYearStatistics(HashMap<String, Customer> customerMap) {
        Stage statisticsStage = new Stage();
        statisticsStage.setTitle("Total sales per year");
        VBox layout = new VBox(10);
        layout.setPadding(new javafx.geometry.Insets(10));
        TableView<propertySalesStat> tableView = new TableView<>();
        TableColumn<propertySalesStat, String> yearColumn = new TableColumn<>("Year");
        TableColumn<propertySalesStat, Number> numberColumn = new TableColumn<>("Sales");
        yearColumn.setCellValueFactory(new PropertyValueFactory<>("property"));
        numberColumn.setCellValueFactory(cellData -> cellData.getValue().numberProperty());
        numberColumn.setCellFactory(col -> new TableCell<propertySalesStat, Number>() {
            @Override
            protected void updateItem(Number item, boolean empty) {
                super.updateItem(item, empty);
                if (empty || item == null) {
                    setText(null);
                } else {
                    setText(String.format("%.2f", item));
                }
            }
        });
        tableView.getColumns().add(yearColumn);
        tableView.getColumns().add(numberColumn);
        HashMap<String, Double> salesPerYear = CustomerMapUtils.getTotalSalesPerFilter(customerMap, "Year");
        ObservableList<propertySalesStat> tableData = FXCollections.observableArrayList();
        salesPerYear.forEach((year, number) -> {
            tableData.add(new propertySalesStat(year, number));
        });
        tableView.setItems(tableData);
        layout.getChildren().add(tableView);
        Scene scene = new Scene(layout, 300, 450);
        statisticsStage.setScene(scene);
        statisticsStage.show();
    }

    public void showSalesPerRegionStatistics(HashMap<String, Customer> customerMap) {
        Stage statisticsStage = new Stage();
        statisticsStage.setTitle("Total sales per Region");
        VBox layout = new VBox(10);
        layout.setPadding(new javafx.geometry.Insets(10));
        TableView<propertySalesStat> tableView = new TableView<>();
        TableColumn<propertySalesStat, String> regionColumn = new TableColumn<>("Region");
        TableColumn<propertySalesStat, Number> numberColumn = new TableColumn<>("Sales");
        regionColumn.setCellValueFactory(new PropertyValueFactory<>("property"));
        numberColumn.setCellValueFactory(cellData -> cellData.getValue().numberProperty());
        numberColumn.setCellFactory(col -> new TableCell<propertySalesStat, Number>() {
            @Override
            protected void updateItem(Number item, boolean empty) {
                super.updateItem(item, empty);
                if (empty || item == null) {
                    setText(null);
                } else {
                    setText(String.format("%.2f", item));
                }
            }
        });
        tableView.getColumns().add(regionColumn);
        tableView.getColumns().add(numberColumn);
        HashMap<String, Double> salesPerRegion = CustomerMapUtils.getTotalSalesPerFilter(customerMap, "Region");
        ObservableList<propertySalesStat> tableData = FXCollections.observableArrayList();
        salesPerRegion.forEach((region, number) -> {
            tableData.add(new propertySalesStat(region, number));
        });
        tableView.setItems(tableData);
        layout.getChildren().add(tableView);
        Scene scene = new Scene(layout, 300, 450);
        statisticsStage.setScene(scene);
        statisticsStage.show();
    }

    public void showTotalSalesPerCustomer(HashMap<String, Customer> customerMap, Customer customer) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle("Statistics");
        alert.setHeaderText(null);
        alert.setContentText("Total sales for Customer: " + CustomerMapUtils.getTotalSalesForCustomer(customerMap, customer.getCustomerId()));
        alert.showAndWait();
    }

    public void showTotalSalesPerOrder(HashMap<String, Customer> customerMap, Order order) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle("Statistics");
        alert.setHeaderText(null);
        alert.setContentText("Total sales for Order: " + CustomerMapUtils.getTotalSalesForOrder(customerMap, order.getOrderId()));
        alert.showAndWait();
    }
}
