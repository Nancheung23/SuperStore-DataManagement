/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package SuperStore;

import java.io.IOException;
import java.util.HashMap;

import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableRow;
import javafx.scene.control.TableView;
import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;
import java.io.File;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.VBox;
import javafx.stage.FileChooser;

public class App extends Application {
    private File lastKnownDirectory = null;

    public static void main(String[] args) throws IOException {
        // javaFx
        Application.launch(args);
    }

    @Override
    public void init() throws Exception {
        // TODO Auto-generated method stub
        super.init();
        System.out.println("DB session// threadpool");
    }

    @Override
    public void start(Stage stage) throws Exception {
        BorderPane root = new BorderPane();
        Scene scene = new Scene(root, 600, 400);
        stage.setTitle("SuperStore Data Importer");
        stage.setScene(scene);
        addFileChooser(root, stage);
        stage.show();
    }

    @Override
    public void stop() throws Exception {
        // TODO Auto-generated method stub
        super.stop();
        System.out.println("stop");
    }

    // GUI
    private void addFileChooser(BorderPane root, Stage primaryStage) {
        VBox vbox = new VBox(10);
        // center display
        vbox.setAlignment(Pos.CENTER);
        Label label = new Label("Choose data CSV file:");
        TextField filePathField = new TextField();
        Label rLabel = new Label("Choose return CSV file:");
        TextField rFilePathField = new TextField();
        filePathField.setEditable(false);
        Button fileButton = new Button("Browse data CSV...");
        Button rFileButton = new Button("Browse return CSV...");

        // Handlers for the data file button
        fileButton.setOnAction(e -> {
            FileChooser fileChooser = new FileChooser();
            if (lastKnownDirectory != null) {
                fileChooser.setInitialDirectory(lastKnownDirectory);
            }
            File selectedFile = fileChooser.showOpenDialog(primaryStage);
            if (selectedFile != null) {
                filePathField.setText(selectedFile.getAbsolutePath());
                lastKnownDirectory = selectedFile.getParentFile();
            }
        });

        // Handlers for the return file button
        rFileButton.setOnAction(e -> {
            FileChooser fileChooser = new FileChooser();
            if (lastKnownDirectory != null) {
                fileChooser.setInitialDirectory(lastKnownDirectory);
            }
            File selectedFile = fileChooser.showOpenDialog(primaryStage);
            if (selectedFile != null) {
                rFilePathField.setText(selectedFile.getAbsolutePath());
                lastKnownDirectory = selectedFile.getParentFile();
            }
        });

        // Initialize button
        Button initButton = new Button("Initialize");
        initButton.setOnAction(e -> {
            if (!filePathField.getText().isEmpty() && !rFilePathField.getText().isEmpty()) {
                FileDataProcessor fdp = new FileDataProcessor(filePathField.getText());
                FileDataProcessor rfdp = new FileDataProcessor(rFilePathField.getText());
                InstanceGenerator ig;
                try {
                    ig = new InstanceGenerator(fdp.processFile());
                    ig.initialization();
                    ig.setReturnMap(rfdp.processFile());
                    // table
                    HashMap<String, Customer> customerMap = ig.getCustomerMap();
                    TableView<Customer> customerTable = createCustomerTable(customerMap);
                    customerTable.setRowFactory(tv -> {
                        TableRow<Customer> row = new TableRow<>();
                        row.setOnMouseClicked(event -> {
                            if (!row.isEmpty() && event.getClickCount() == 2) {
                                Customer clickedRow = row.getItem();
                                showCustomerOrders(clickedRow, primaryStage);
                            }
                        });
                        return row;
                    });
                    root.setCenter(customerTable);
                } catch (IOException e1) {
                    e1.printStackTrace();
                }
            } else {
                // Handle the error condition here
                System.out.println("Both data and return files must be selected.");
            }
        });
        // Add components to the VBox
        vbox.getChildren().addAll(label, filePathField, fileButton, rLabel, rFilePathField, rFileButton, initButton);
        root.setCenter(vbox);
    }

    private void showCustomerOrders(Customer customer, Stage primaryStage) {
        Stage stage = new Stage();
        TableView<Order> orderTable = new TableView<>();

        orderTable.setItems(FXCollections.observableArrayList(customer.getOrders().values()));
        Scene scene = new Scene(orderTable);
        stage.setScene(scene);
        stage.setTitle("Orders for " + customer.getCustomerName());
        stage.show();
    }

    private TableView<Customer> createCustomerTable(HashMap<String, Customer> customerMap) {
        TableView<Customer> table = new TableView<>();
        TableColumn<Customer, String> idColumn = new TableColumn<>("Customer ID");
        idColumn.setCellValueFactory(new PropertyValueFactory<>("customerId"));

        TableColumn<Customer, String> nameColumn = new TableColumn<>("Name");
        nameColumn.setCellValueFactory(new PropertyValueFactory<>("customerName"));

        TableColumn<Customer, String> segmentColumn = new TableColumn<>("Segment");
        segmentColumn.setCellValueFactory(new PropertyValueFactory<>("segment"));

        table.getColumns().add(idColumn);
        table.getColumns().add(nameColumn);
        table.getColumns().add(segmentColumn);

        ObservableList<Customer> data = FXCollections.observableArrayList(customerMap.values());
        table.setItems(data);

        return table;
    }

}
